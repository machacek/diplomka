#!/bin/bash
# Prepare a generation model for moses

set -o pipefail
function die() { echo "$@" | tee FAILED >&2; exit 1 ; }

eman \
  defvar BINARIES type=reqstep \
    help="the step containing compiled tools" \
  defvar GENCORP \
    help="source corpus name" \
  defvar GENLANG \
    help="language that we generate from and to" \
  defvar TGTAUG help="the string describing lang+factors of the corpus" \
  defvar TRAININGFLAGS default='' help="flags for train-factored-phrase-model.perl" \
|| exit 1

eval `eman bash-loadvars`

PLAYGROUND=`eman path`

  echo "  \$GENLANG to the language"
  echo "  \$SRCAUG to the string describing src factors, e.g. lemma+tag"
  echo "  \$TGTAUG to the string describing tgt factors, e.g. stc"
  exit 1
fi

SCRIPTS_ROOTDIR="`cat ../$BINARIES/scripts.rootdir`"

cat << KONEC > eman.vars
BINARIES=$BINARIES
GENCORP=$GENCORP
GENLANG=$GENLANG
SRCAUG=$SRCAUG
TGTAUG=$TGTAUG
KONEC

echo $GENLANG > var-GENLANG
echo $SRCAUG > var-SRCAUG
echo $TGTAUG > var-TGTAUG

echo $BINARIES > eman.deps

echo GEN$GENCORP+$GENLANG+$SRCAUG++$TGTAUG > eman.tag

# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0

# need to create 0,1,2-3,4 depending on src and tgt aug

GENERATIONFACTORS=`perl -e ' \
  $scnt=scalar(split(/\+/, "'$SRCAUG'"))-1; \
  $tcnt=scalar(split(/\+/, "'$TGTAUG'"))-1; \
  print join(",", 0..$scnt)."-".join(",", $scnt+1..$scnt+1+$tcnt); '`

cat << KONEC > eman.command
# This is the command to be run here
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="

mydir=\`pwd\`

set -o pipefail
function die() { echo "\$@" | tee \$mydir/FAILED >&2; exit 1 ; }

renice 10 \$\$

## Prepare the corpus from more factors
export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR
echo SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR

mkdir corpus

cd corpus
../../scripts/wiseln \`../../augmented_corpora/augment.pl $GENCORP/$GENLANG+$SRCAUG+$TGTAUG\` corpus.gen.gz \
  || die "Failed to clone corpus"
cd ..

mkdir model

tempdir=\`mktemp -d /mnt/h/tmp/exp.gm.XXXXXX\`
echo "COPYING SELF TO TEMPDIR: \$tempdir"
rsync -avz --exclude '*.hardlink' * \$tempdir/ || die "Failed to rsync"
echo "COPIED, used disk space:"

df \$tempdir

if \\
  \$SCRIPTS_ROOTDIR/training/train-factored-phrase-model.perl \\
        --force-factored-filenames \\
	    --first-step 8 --last-step 8 \\
	    --root-dir \$tempdir \\
	    --corpus=corpus/corpus \\
	    --f gen --e gen \\
        --generation-factors $GENERATIONFACTORS \\
; then
  success=1
  echo "COPYING TEMPDIR \$tempdir BACK"
  rsync -uavz \$tempdir/* ./ || die "Rsync back failed"
  echo "COPIED"

  echo Deleting \$tempdir
  rm -rf \$tempdir
else
  success=0
  rsync -uavz \$tempdir/log* ./ || die "Rsync of log back failed"
  echo "ONLY log copied back. Majority of files left here: \$tempdir"
fi

[ \$success == 1 ] || die "THERE WERE ERRORS!! See above."

echo DONE > \$mydir/eman.status

echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC
