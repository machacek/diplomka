#!/bin/bash
# translates the given corpus, outputs the alignments produced by Moses

if [ -z "$MERTEXP" ] \
|| [ -z "$BINARIES" ] \
|| [ -z "$INPUTCORP" ]; then
  echo "You must set: "
  echo "  \$BINARIES to the step containing compiled tools"
  echo "  \$MERTEXP to the directory that contains the model, incl. all files, the optimized ini will be used"
  echo "  \$INPUTCORP to the corpus for translation"
  echo "and optionally"
  echo "  \$MOSESFLAGS to any further flags"
  echo "  \$GRIDFLAGS to any further flags"
  echo "  \$CORPUS to output corpus directory"
  echo "  \$JOBS to number of jobs" # or 0 for serial"
  echo "  \$CHUNKSIZE to the size of translated chunks in lines"
  echo "  \$ITER to the ITER-th BEST at... (will use run(ITER+1).moses.ini)"
  echo "  \$INVERTALI to \"yes\" if output alignment should be inverted (e.g. for reverse self-training)"
  exit 1
fi

SCRIPTS_ROOTDIR="`pwd`/../$BINARIES/moses/scripts"
MOSESCMD="`pwd`/../$BINARIES/bin/moses"

[[ -d ../exp.mert.$MERTEXP ]] && MERTEXP=exp.mert.$MERTEXP

if [[ ! -d ../$MERTEXP ]]; then
  echo "Experiment not found: $MERTEXP"
  exit 1
fi

JOBS=${JOBS:-20}
CHUNKSIZE=${CHUNKSIZE:-10000}

if [ ! -z "$ITER" ]; then
  iterprefix=run$(($ITER+1)).
  itertag=ITER$ITER
fi

echo `cat ../$MERTEXP/eman.tag`"$itertag"TEST$INPUTCORP > eman.tag

if [ -z "$REFAUG" ]; then
  eval `cat ../$MERTEXP/eman.vars | grep 'REFAUG='`
  echo "Inheriting REFAUG: $REFAUG"
fi

MODELEXP=`cat ../$MERTEXP/info.modelexp`
SAVEMODELEXP=$MODELEXP
eval `cat ../$MODELEXP/eman.vars` || exit 1
MODELEXP=$SAVEMODELEXP

# hack to make toa look like align
if [ "$INVERTALI" = "yes" ]; then
  OUTALILABEL=toa-$(echo $REFAUG-$SRCAUG | tr '+.' '--')
  INVERT_CMD=" sed -r 's/([0-9]+)-([0-9]+)/\2-\1/g' | "
else
  OUTALILABEL=toa-$(echo $SRCAUG-$REFAUG | tr '+.' '--')
  INVERT_CMD=""
fi

[ -n "$CORPUS" ] || CORPUS="$INPUTCORP-toa"

cat << KONEC > eman.vars
BINARIES=$BINARIES
MERTEXP=$MERTEXP
INPUTCORP=$INPUTCORP
MOSESFLAGS="$MOSESFLAGS"
GRIDFLAGS="$GRIDFLAGS"
OUTALILABEL="$OUTALILABEL"
ALISYM="$ALISYM"
JOBS=$JOBS
ITER=$ITER
CORPUS=$CORPUS
INVERTALI=$INVERTALI
KONEC

echo $MODELEXP > ./info.modelexp
echo $MERTEXP > info.mertexp

echo $MERTEXP > ./eman.deps
echo $BINARIES >> eman.deps

# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0

## We're using irstlm, change the lmodel-file type:
# ../set_lm_type.pl ./moses.ini || die "Failed to set lmtype" || exit 1


# for running this command, qsub is allowed, although we're going to submit jobs ourselves
# echo "no" > qsub-allowed

SRC_LANG="`echo $SRCAUG | cut -d+ -f1`"
SRC_FACT="`echo $SRCAUG | cut -d+ -f2- | tr '+' '|'`"
TGT_LANG="`echo $REFAUG | cut -d+ -f1`"
TGT_FACT="`echo $REFAUG | cut -d+ -f2- | tr '+' '|'`"

# auxiliary script submitted for each chunk of input
# run with args: lines_max index
cat << KONEC > toa.job
#!/bin/bash

export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR

mydir=`pwd`

index_formatted=\`printf "%05d" \$QRUNCMD_JOBNUM\`

set -o pipefail
function die() { echo "\$@" >&2 ; echo FAILED > \$mydir/status\$index_formatted ; exit 1 ; }

echo RUNNING > \$mydir/status\$index_formatted 

# copy STDIN
tempfile="/mnt/h/tmp/\`mktemp | xargs basename\`"
cat > \$tempfile;

$SCRIPTS_ROOTDIR/training/filter-model-given-input.pl \\
  filtered-for-eval\$index_formatted ./moses.abs.ini \$tempfile 2>&1 \\
  || die "Failed to filter"

./moses \\
  -search-algorithm 1 \\
  -alignment-output-file alignment\$index_formatted \\
  $MOSESFLAGS \\
  -input-file \$tempfile \\
  -config ./filtered-for-eval\$index_formatted/moses.ini \\
  | gzip -c > evaluation\$index_formatted.opt.out.gz \\
  || die "Failed to translate"

rm -rf filtered-for-eval\$index_formatted
rm \$tempfile

echo DONE > \$mydir/status\$index_formatted 
KONEC

chmod +x toa.job

cat << KONEC > eman.command
# This is the command to be run here
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
renice 10 \$\$

mydir=\`pwd\`

# init grid environment
. /net/projects/SGE/user/sge_profile

set -o pipefail
function die() { echo "\$@" >&2 ; echo FAILED > \$mydir/eman.status ; exit 1 ; }

export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR
echo export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR
export REFAUG=$REFAUG

../augmented_corpora/augment.pl --dump $INPUTCORP/$SRCAUG > evaluation.in || exit 1

echo Checking eval corp size
[ \`wc -l < evaluation.in\` -gt 0 ] || exit 1

# clone some important executables
../../scripts/wiseln $MOSESCMD ./moses || die "Failed to clone moses"

TARGETLAN_FOR_DETOKENIZER=\`echo \$REFAUG | sed 's/^\(..\).*/\1/'\`
if ! echo "test" | \$SCRIPTS_ROOTDIR/recaser/detokenizer.perl \
       -u -l \$TARGETLAN_FOR_DETOKENIZER > /dev/null 2>&1 ; then 
  echo "Defaulting to 'en' as the targetlang for detokenizer."
  TARGETLAN_FOR_DETOKENIZER=en
fi

## Clone the moses.ini and source files
\$SCRIPTS_ROOTDIR/training/clone_moses_model.pl \\
  --symlink \\
  ../$MERTEXP/mert-tuning/"$iterprefix"moses.ini || die "Failed to clone"

\$SCRIPTS_ROOTDIR/training/absolutize_moses_model.pl ./moses.ini > moses.abs.ini || die "Failed to absolutize"

../../scripts/qruncmd -jobs=$JOBS -split-to-size=$CHUNKSIZE ./toa.job evaluation.in || die "Failed to filter and translate"

ls alignment0* | sort -n | xargs cat | sed 's/ $//' | $INVERT_CMD gzip -c > alignment.gz
ls evaluation0*.opt.out.gz | sort -n | xargs zcat | sed 's/ $//' | gzip -c > evaluation.opt.out.gz

if [ -n "\`grep 'FAILED\|RUNNING' status0*\`" ]; then
  die "Some of the translation jobs have failed"
fi

rm status0*

# rm alignment0* evaluation0*.opt.out.gz

if [ -d ../augmented_corpora/$CORPUS ]; then
  die "Won't overwrite existing directory ../augmented_corpora/$CORPUS"
fi

mkdir ../augmented_corpora/$CORPUS
../../scripts/wiseln ../augmented_corpora/$INPUTCORP/LINECOUNT ../augmented_corpora/$CORPUS/LINECOUNT
gzip -c < evaluation.in > ../augmented_corpora/$CORPUS/$SRC_LANG.gz
../../scripts/wiseln evaluation.opt.out.gz ../augmented_corpora/$CORPUS/$TGT_LANG.gz 
../../scripts/wiseln alignment.gz ../augmented_corpora/$CORPUS/$OUTALILABEL.gz 
echo "$SRC_FACT" >../augmented_corpora/$CORPUS/$SRC_LANG.info
echo "$TGT_FACT" >../augmented_corpora/$CORPUS/$TGT_LANG.info
echo ali > ../augmented_corpora/$CORPUS/$OUTALILABEL.info

echo DONE > \$mydir/eman.status

echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC
