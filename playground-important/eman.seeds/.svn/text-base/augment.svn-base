#!/bin/bash
# eman step to call the old augment.pl
# This is Dan's temporary solution until Dan switches to the new corpman thing.
# Copyright Â© 2012 Dan Zeman <zeman@ufal.mff.cuni.cz>
# License: GNU GPL

function die() { echo "$@" >&2; exit 1; }
set -o pipefail  # safer pipes

# Ensure all the required variables are set (or provide the default).
# Note that we also require STATMT, which is constant w.r.t. individual experiments.
# However, we do not define it as one of the variables defining the step (because its value will be the same in all our experiments).
# It points to the current user's working copy of the StatMT repository. You should set it in your login config file.
if [ -z "$STATMT" ] ; then
  echo "You must set: "
  echo "  \$STATMT to the root of your working copy of the StatMT repository (one level above playground)"
  echo "  \$SRC to the code of the source language"
  echo "  \$TGT to the code of the target language"
  exit 1
fi
SCRIPTS=$STATMT/scripts
# We still use the old augment.pl to fetch the data.
AUGMENT=$STATMT/playground/augmented_corpora/augment.pl
AUGMAKEFILE=$STATMT/playground/augmented_corpora/Makefile
AUGDIR=/net/work/people/zeman/wmt/augmented_corpora
eman defvar OUTCORP  help='name of output corpus, e.g. newstest2008' \
     defvar OUTLANG  help='language of output corpus, e.g. en' \
     defvar OUTFACTS help='factor(s) of output corpus, e.g. lemma' \
|| exit 1
# We still use the old augment.pl to fetch the data.
AUGMENT=$STATMT/playground/augmented_corpora/augment.pl
AUGMAKEFILE=$STATMT/playground/augmented_corpora/Makefile
AUGDIR=/net/data/augmented_corpora
# Abbreviate some corpus names (de-cs, es-cs and fr-cs are already abbreviated in augmented_corpora, cs-en, de-en, es-en and fr-en are not).
INCORP=`echo $OUTCORP | perl -pe 's/news-europarl-v7\.([a-z]+-en)/news-commentary-v7.$1+europarl-v7.$1/; s/news-europarl-v7\.([a-z]+-cs)/news-commentary-europarl-v7.$1/ ; s/(newstest2\d\d\d)/$1-v6b/'`
ACDESC=$INCORP/$OUTLANG+$OUTFACTS

# Set local bash variables.
eval `eman bash-loadvars`

# Create corpman.info so that this step can be located by corpman when searching for a specific corpus.
# Fifth parameter after corpus.txt.gz: -1 ... we do not know the number of lines at the moment.
# Sixth parameter after corpus.txt.gz: 0 ... this corpus is not automatically derived from another corpus.
$STATMT/playground/corpman register -- corpus.txt.gz -1 $OUTCORP $OUTLANG $OUTFACTS -1 0 \
|| die "Cannot register corpus"

# Don't continue if we are not preparing the step yet.
[ -z "$INIT_ONLY" ] || exit 0

cat > eman.command << KONEC
#!/bin/bash
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
mydir=\$(pwd)
set -o pipefail
function die() { echo "\$@" >&2 ; eman fail \$mydir ; exit 1 ; }
renice 10 \$\$

# Note: the essential --dir and --makefile arguments must be stored in a file
# because augment.pl may call "make" and the Makefile will call another
# augment.pl, without being able to put through these arguments.
echo "--dir=$AUGDIR --makefile=$AUGMAKEFILE" > $STATMT/playground/augmented_corpora/augment.pl.flags || die "Failed to save augment.pl.flags"
# We need to know whether $AUGMENT succeeded so we must first assign its output to a variable and then check the value.
AUGPATH=\`$AUGMENT $ACDESC\`
[ -e "\$AUGPATH" ] || die "Failed to augment $ACDESC"
echo ln -s \$AUGPATH corpus.txt.gz
ln -s \$AUGPATH corpus.txt.gz || die "Failed to link to the augmented corpus"
# Get the number of lines and re-register the corpus.
echo "Checking output number of lines of corpus.txt.gz"
nl=\$(zcat corpus.txt.gz | wc -l)
echo "Re-registering the corpus with \$nl lines."
$STATMT/playground/corpman register -- corpus.txt.gz -1 $OUTCORP $OUTLANG $OUTFACTS \$nl 0 \\
|| die "Cannot register corpus"
# Remove corpman.index, force reindexing.
rm -f \$mydir/../corpman.index || echo "Failed to force reindexing"

# Standard command footer
echo Done.
eman succeed \$mydir
echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC
