#!/bin/bash
# eman seed for running mert on a moses model

function die() { echo "$@" >&2; exit 1; }
set -o pipefail  # safer pipes

PLAYGROUND=`eman path` # eman playground directory

# Ensure all the required variables are set (or provide the default)
eman \
  defvar MERTRUNS default='3' help='how many instances of MERT to run' \
  defvar MODELSTEP type=reqstep help='where is the model (moses.ini) incl. all files' \
  defvar DEVCORP help='the corpus for tuning; use colon to delimit more corpora (the source side will be taken from the first one only)' \
  defvar TESTCORP help='the corpus to translate' \
  defvar SRCAUG inherit=MODELSTEP help='the source lang+factors' \
  defvar REFAUG inherit=MODELSTEP:TGTAUG \
    help='the target (reference) lang+factors' \
  defvar SEARCH default=cube help='the search type (beam or cube)' \
  defvar MOSESFLAGS default='' help='further flags for moses' \
  defvar MERTFLAGS default='' help='further flags for mert.pl' \
  defvar GRIDFLAGS default='' help='further flags for qsub' \
  defvar STACK default='' help='stacksize for beam search' \
  defvar TAGPREF default='' help='eman tag prefix' \
  defvar MERTPRG default='mert' help='mert/zmert/pro (not quite tested)' \
  defvar JOBS default='15' help='decoder jobs to run, set 0 for disabling SGE altogether' \
  defvar MOSESSTEP inherit='MODELSTEP' help='where are moses scripts and binaries' \
|| exit 1

# Set local bash variables
eval `eman bash-loadvars`

cat << KONEC > eman.command
#!/bin/bash
# This is the command to be run here
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
mydir=\$(pwd)

trap "exit 1" TERM # needed for dying inside backticked function

set -o pipefail
function die() { echo "\$@" >&2 ; eman fail \$mydir ; kill -s TERM \$TOP_PID ; }
renice 10 \$\$
ulimit -c 1 # core files limited to 1 byte

function create_step
{
  stepname=\$(eman init -start \$@ 2>&1 | tail -1 | grep submitted | sed 's/Step \(.*\) submitted.*/\1/')
  [ -n "\$stepname" ] || die "Failed to create step \$@"
  echo \$stepname
}

PLAYGROUND=\$(eman path)
mydir=\$(pwd)

cd \$PLAYGROUND

for run in \$(seq 1 $MERTRUNS) ; do
    RUNS="\$RUNS \$(MODELSTEP='$MODELSTEP' \\
        DEVCORP='$DEVCORP' SRCAUG='$SRCAUG' REFAUG='$REFAUG' \\
        SEARCH='$SEARCH' MOSESFLAGS='$MOSESFLAGS' MERTFLAGS='$MERTFLAGS' \\
        GRIDFLAGS='$GRIDFLAGS' STACK='$STACK' \\
        TAGPREF='$TAGPREF' MERTPRG='$MERTPRG' \\
        JOBS='$JOBS' MOSESSTEP='$MOSESSTEP' create_step mert)"
done

echo "Created 'mert' steps: \$RUNS"

for mertstep in \$RUNS ; do
    TRANSSTEPS="\$TRANSSTEPS \$(MERTSTEP=\$mertstep \\
        TESTCORP=$TESTCORP create_step translate)"
done

echo "Created 'translate' steps: \$TRANSSTEPS"

for transstep in \$TRANSSTEPS ; do
    EVALSTEPS="\$EVALSTEPS \$(TRANSSTEP=\$transstep \\
        create_step evaluator)"
done

echo "Created 'evaluator' steps: \$EVALSTEPS"

eman wait \$EVALSTEPS

echo "Evaluator steps finished."

TOTAL=0
for evalstep in \$EVALSTEPS ; do
  [ \$(cat \$evalstep/eman.status) = DONE ] || die "Step failed: \$evalstep"
  SCORE=\$(cat \$evalstep/scores | grep BLEU | cut -f2)
  TOTAL=\$(echo "\$TOTAL + \$SCORE" | bc -l)
done

cd \$mydir

echo "\$TOTAL * 100 / $MERTRUNS" | bc -l > averagebleu

# Standard command footer
echo Done.
eman succeed \$mydir
echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC
