#!/bin/bash
# translates the given corpus

function die() { echo "$@" >&2; exit 1; }
set -o pipefail  # safer pipes

PLAYGROUND=$(eman path)

eman \
  defvar MERTSTEP type=reqstep \
    help="step containing configuration file for Moses" \
  defvar MOSESSTEP type=reqstep inherit=MERTSTEP \
    help="the step containing compiled tools; inherited from MERTSTEP" \
  defvar TESTCORP help='the corpus to translate' \
  defvar SRCAUG inherit=MERTSTEP \
    help="language+factors to translate" \
  defvar REFAUG inherit=MERTSTEP \
    help="language that will be created by translating; factor is 'untok'" \
  defvar ITER default='' \
    help="which MERT iteration weights to use; default is the final set" \
  defvar SEARCH default=cube help='the search type (beam or cube)' \
  defvar JOBS default=15 help='how many jobs to spawn (0 to disable SGE)' \
  defvar GRIDFLAGS default='' inherit=MERTSTEP help='further flags for qsub' \
  defvar MOSESFLAGS default='' inherit=MERTSTEP help='further flags for moses' \
|| exit 1

eval `eman bash-loadvars`

STEPNAME=$(basename $(pwd))
MOSESSTEPDIR=$(eman path $MOSESSTEP)
MERTSTEPDIR=$(eman path $MERTSTEP)
MOSESCMD="$MOSESSTEPDIR/bin/moses"
SCRIPTS_ROOTDIR="$MOSESSTEPDIR/moses/scripts/"

if [ ! -z "$ITER" ]; then
  iterprefix=run$(($ITER+1)).
  itertag=ITER$ITER
fi

case "$SEARCH" in
beam)
  SEARCHFLAG="-search-algorithm 0"
  ;;
cube)
  SEARCHFLAG="-search-algorithm 1"
  ;;
*)
  die "Bad search algorithm: $SEARCH"
  ;;
esac

# ask for corpus to translate, add it to deps
srccorpstep=$($PLAYGROUND/corpman --init $TESTCORP/$SRCAUG | cut -f1)
[ ! -z "$srccorpstep" ] || die "Missing source corpus"

eman add-deps . $srccorpstep $tgtcorpstep

OUTLANG=`echo $REFAUG | cut -d'+' -f1`_$STEPNAME
DETOKFACT=untok
TOKFACT="$(echo $REFAUG | cut -d'+' -f2-)"
ALIFACT="ali"

DETOKAUG="$OUTLANG+$DETOKFACT" eman defvar DETOKAUG
TOKAUG="$OUTLANG+$TOKFACT" eman defvar TOKAUG
OUTALIAUG="$OUTLANG+$ALIFACT" eman defvar OUTALIAUG

# promise translated corpus
# linecount is added after tranlating
$PLAYGROUND/corpman register -- translated.gz \
  -1 $TESTCORP $OUTLANG $TOKFACT -1 0 \
|| die "Can't register corpus"
$PLAYGROUND/corpman register -- translated.untok.gz \
  -1 $TESTCORP $OUTLANG $DETOKFACT -1 0 \
|| die "Can't register corpus"
$PLAYGROUND/corpman register -- alignment.gz \
  -1 $TESTCORP $OUTLANG $ALIFACT -1 0 \
|| die "Can't register corpus"

# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0

MOSESPARALLEL="$SCRIPTS_ROOTDIR/generic/moses-parallel.pl"

if [ $JOBS == 0 ]; then
  GRIDARGS=""
  MOSESMAYPARALLEL="./moses $SEARCHFLAG $MOSESFLAGS"
else
  # Set default cluster priority unless already specified by the user.
  if [[ "$GRIDFLAGS" =~ -p' '+-?[0-9]+ ]] ; then
    PGRIDFLAGS="$GRIDFLAGS -cwd -S /bin/bash"
  else
    PGRIDFLAGS="$GRIDFLAGS -p -100 -cwd -S /bin/bash"
  fi
  MERTGRIDARGS="--jobs=$JOBS --queue-flags=' $PGRIDFLAGS ' "
  MOSESGRIDARGS="--jobs=$JOBS --queue-parameters=' $PGRIDFLAGS ' "
  MOSESMAYPARALLEL="$MOSESPARALLEL $MOSESGRIDARGS -decoder-parameters '$SEARCHFLAG $MOSESFLAGS' -feed-decoder-via-stdin -decoder ./moses"
fi

cat << KONEC > eman.command
#!/bin/bash
# This is the command to be run here
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
mydir=\$(pwd)
set -o pipefail
function die() { echo "\$@" >&2 ; eman fail \$mydir ; exit 1 ; }
renice 10 \$\$
ulimit -c 1 # core files limited to 1 byte

# If local copy of input files already exists (we are running 'eman continue') remove it first.
rm -rf moses* corpus*

# init grid environment
. /net/projects/SGE/user/sge_profile

export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR
echo export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR

# clone some importnant executables
$PLAYGROUND/../scripts/wiseln $MOSESCMD ./moses || die "Moses missing"

TARGETLAN_FOR_DETOKENIZER=`echo $REFAUG | sed 's/^\(..\).*/\1/'`
if ! echo "test" | \$SCRIPTS_ROOTDIR/tokenizer/detokenizer.perl \\
       -u -l \$TARGETLAN_FOR_DETOKENIZER > /dev/null 2>&1 ; then
  echo "Defaulting to 'en' as the targetlang for detokenizer."
  TARGETLAN_FOR_DETOKENIZER=en
fi


function mkcorpus() {
  $PLAYGROUND/corpman --wait \$1 || die "Failed to prepare \$1"
  step_file_col=(\$($PLAYGROUND/corpman \$1))
  if [ "\${step_file_col[2]}" == "-1" ]; then
    $PLAYGROUND/../scripts/wiseln $PLAYGROUND/\${step_file_col[0]}/\${step_file_col[1]} \\
      corpus.\$2.gz \
    || die "Failed to clone \$2 corpus \$1"
  else
    echo "Selecting the column from \$step_file_col"
    eval \$($PLAYGROUND/corpman --cmd \$1) \\
    | gzip -c > corpus.\$2.gz
  fi
}

mkcorpus $TESTCORP/$SRCAUG src
gunzip -c corpus.src.gz > corpus.src

## Clone the moses.ini and source files
\$SCRIPTS_ROOTDIR/training/clone_moses_model.pl \\
  --symlink \\
  $MERTSTEPDIR/mert-tuning/"$iterprefix"moses.ini || die "Failed to clone"

\$SCRIPTS_ROOTDIR/training/absolutize_moses_model.pl \`pwd\`/moses.ini > moses.abs.ini || die "Failed to absolutize"

\$SCRIPTS_ROOTDIR/training/filter-model-given-input.pl filtered-for-eval \`pwd\`/moses.abs.ini corpus.src || die "Failed to filter"

$MOSESMAYPARALLEL \\
  -input-file ./corpus.src \\
  -alignment-output-file ./alignment \
  -config ./filtered-for-eval/moses.ini \\
| sed 's/^ *//;s/ *\$//' \
| gzip -c \\
> translated.gz \\
|| die "Failed to translate"

sed -e 's/^ *//' -e 's/ *$//' -i alignment
gzip alignment

echo "Detokenizing translation"
zcat translated.gz \\
| \$SCRIPTS_ROOTDIR/tokenizer/detokenizer.perl -u -l \$TARGETLAN_FOR_DETOKENIZER \\
| gzip -c \\
> translated.untok.gz \\
|| die "Failed to detokenize"

linecount=\`zcat translated.untok.gz | wc -l\`
## fill in linecount of the final corpus
$PLAYGROUND/corpman register -- translated.gz \
  -1 $TESTCORP $OUTLANG $TOKFACT \$linecount 0 \
|| die "Can't register linecount of the translated corpus"
$PLAYGROUND/corpman register -- translated.untok.gz \
  -1 $TESTCORP $OUTLANG $DETOKFACT \$linecount 0 \
|| die "Can't register linecount of the translated corpus"
$PLAYGROUND/corpman register -- alignment.gz \
  -1 $TESTCORP $OUTLANG $ALIFACT \$linecount 0 \
|| die "Can't register linecount of the output alignment"

echo "You could prepare detailed output for manual inpection:"
echo ./moses -input-file ./corpus.src -config ./filtered-for-eval-opt/moses.ini \\
  -verbose 3 \\
  2>&1
#  | skipbetween '^Translation Option Collection' '^total hypotheses generated' \\
#  | head -c 300k \\
#  > translated.verbose

# Standard command footer
echo Done.
eman succeed \$mydir
echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC
