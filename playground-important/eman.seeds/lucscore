#!/bin/bash
# eman step to score baseline translation

function die() { echo "$@" >&2; exit 1; }
set -o pipefail # safer pipes

PLAYGROUND=`eman path` # eman playground directory
LUCSCOREDIR=`pwd` # actual directory (lucindexscore)
STEPNAME=$(basename $(pwd))


# Ensure all the required variables are set (or provide the default)
eman \
   defvar INDEXDIR type=reqstep help='directory with lucene index' \
   defvar SRCCORP help='the "query corpus" according which should be searched' \
   defvar SRCAUG inherit=INDEXDIR help='lang+factor of SRCCORP' \
   defvar CUT default='3' help='cut-off limit for lucene' \
   defvar OPTIONS default='' help='options for lucene filtering' \
   defvar OUTCORP default='' help='corpus of the output, constructed from INDEXDIR-corpus and this step name' \
   defvar OUTLANG default='' help='language of output, taken from SRCAUG by default' \
|| exit 1

# Set local bash variables
eval `eman bash-loadvars`

# construct OUTCORP and friends (honor user's predefined values)
export OUTCORP=${OUTCORP:-$(eman get-var $INDEXDIR SRCCORP)-$STEPNAME}
export OUTLANG=${OUTLANG:-$(echo $SRCAUG | cut -d+ -f1)}
export OUTFACTORS=${OUTFACTORS:-$(echo $SRCAUG | cut -d+ -f2-)}

# Store the calculated values
eman defvar OUTCORP \
     defvar OUTLANG \
     defvar OUTFACTORS

# Check our input
# Can't check for this: at init phase, the indexes are not there yet
#[ -e $PLAYGROUND/$INDEXDIR/indexes ] \
#|| die "\$INDEXDIR not found"

# should run --init and add thecorpus to our deps XXX
# $PLAYGROUND/corpman $SRCCORP/$SRCAUG \
#  || die "$SRCCORP/$SRCAUG not found"

# Preregister corpora
$PLAYGROUND/corpman register -- output.txt.gz \
  -1	$OUTCORP	$OUTLANG	$OUTFACTORS	-1	0 \
|| die "Can't register corpus"

$PLAYGROUND/corpman register -- output.lineids.gz \
  -1	$OUTCORP	lineids	id	-1	0 \
|| die "Can't register corpus"

# Don`t continue if we are not preparing the step yet
[ -z "$INIT_ONLY" ] || exit 0

# UFAL custom or default temp dir
TEMPDIR=/mnt/h/tmp
[ -d $TEMPDIR ] || TEMPDIR=/tmp

cat > eman.command << KONEC
#!/bin/bash
echo "============================"
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\` 
echo "============================"
mydir=\$(pwd)
set -o pipefail
function die() { echo "\$@" >&2 ; eman fail \$mydir ; exit 1 ; }

function mkcorpus() {
  $PLAYGROUND/corpman --wait \$1 || die "Failed to prepare \$1"
  step_file_col=(\$($PLAYGROUND/corpman \$1))
  if [ "\${step_file_col[2]}" == "-1" ]; then
    STEPPATH=\$(eman path \${step_file_col[0]})
    $PLAYGROUND/../scripts/wiseln \$STEPPATH/\${step_file_col[1]} \\
      corpus.\$2.gz \
    || die "Failed to clone \$2 corpus \$1"
  else
    echo "Selecting the column from \$step_file_col"
    eval \$($PLAYGROUND/corpman --cmd \$1) \\
    | gzip -c > corpus.\$2.gz
  fi
}

mkcorpus $SRCCORP/$SRCAUG query

cd $PLAYGROUND/LuceneIndexer \\
  || die "Failed to chdir to $PLAYGROUND/LuceneIndexer"

echo "Finding lines in $INDEXDIR that best match $SRCCORP"
./scoreBySentence inputfile=$LUCSCOREDIR/corpus.query.gz \\
    lucene.index.directory=$PLAYGROUND/$INDEXDIR/indexes \\
    score.nbest=$CUT \\
    $OPTIONS \\
| gzip -c > $LUCSCOREDIR/output.gz \\
|| die "Failed to filter index"

cd $LUCSCOREDIR \\
  || die "Failed to chdir to $LUCSCOREDIR"

zcat output.gz | cut -f 3 | grep -v '^$' \\
| sort -u --compress-program=gzip -T $TEMPDIR \\
| gzip -c > output.txt.gz \\
  || die "Failed to filter text"

zcat output.gz | cut -f 1 | grep -v '^$' \\
| sort -u \\
| gzip -c > output.lineids.gz \\
  || die "Failed to filter linenums"

$PLAYGROUND/corpman register -- output.txt.gz \\
  -1	$OUTCORP	$OUTLANG	$OUTFACTORS	\$(zcat output.txt.gz | wc -l)	0 \\
|| die "Can't register linecount of the filtered corpus"

$PLAYGROUND/corpman register -- output.lineids.gz \\
  -1	$OUTCORP	lineids	id	\$(zcat output.lineids.gz | wc -l)	0 \
|| die "Can't register linecount of the filtered corpus"

echo Done.
eman succeed \$mydir
echo "============================"
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "============================"

KONEC

