#!/bin/bash
# eman seed for joshua corpus binarization
# Copyright Â© 2012 Dan Zeman <zeman@ufal.mff.cuni.cz>
# License: GNU GPL

function die() { echo "$@" >&2; exit 1; }
set -o pipefail  # safer pipes

PLAYGROUND=`eman path` # eman playground directory

# Ensure all the required variables are set (or provide the default)
eman \
  defvar JOSHUASTEP type=reqstep help='where is compiled Joshua' \
  defvar ALIGNSTEP type=reqstep help='where is alignment.gz (only one column, use danalign seed!)' \
  defvar DATASTEP inherit=ALIGNSTEP help='where are train.$SRC.gz and train.$TGT.gz' \
  defvar SRC inherit=ALIGNSTEP help='source language code' \
  defvar TGT inherit=ALIGNSTEP help='target language code' \
|| exit 1

# Set local bash variables
eval `eman bash-loadvars`

eman add-tag $SRC-$TGT .

# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0

# convert the dependencies to absolute paths
JOSHUABINDIR=`eman path $JOSHUASTEP`/bin
DATASTEPDIR=`eman path $DATASTEP`
ALIGNSTEPDIR=`eman path $ALIGNSTEP`
TRAINS=$DATASTEPDIR/train.$SRC.gz
TRAINT=$DATASTEPDIR/train.$TGT.gz

# Run checks in the preparation phase
[ -f $TRAINS ] && [ -f $TRAINT ] && [ -f $ALIGNMENT ] || exit 1

# Emit the main script to be used in the running phase
cat > eman.command << KONEC
#!/bin/bash
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
mydir=\$(pwd)
set -o pipefail
function die() { echo "\$@" >&2 ; eman fail \$mydir ; exit 1 ; }
renice 10 \$\$
ulimit -c 1 # core files limited to 1 byte

# While binarization can read gzipped training corpora, it cannot read gzipped alignment file.
gunzip -c $ALIGNSTEPDIR/alignment.gz > alignment.txt \\
|| die "Cannot gunzip $ALIGNSTEPDIR/alignment.gz"
# Check that the alignment indices link to existing source/target tokens.
$STATMT/scripts/check_alignment.pl $TRAINS $TRAINT alignment.txt \\
|| die "Alignment does not match the selected parallel corpus and translation direction"

# Most experiments worked with '-Xms1024m -Xmx1024m' but the 7M-sentence Czeng+Emea killed it.
# Note however that we also specify memory requirements when submitting this script as a cluster job.
# To get a 32GB machine, we should ask the cluster for 31g and leave 1g for system processes.
# However, Java must ask for even less. Experimentally tested: 26g works, 27g does not.
# Xmx: upper limit for heap memory consumption; Xms: initial memory allocation.
JAVA="java -Dfile.encoding=UTF8 -Xms26g -Xmx26g -cp $JOSHUABINDIR"
# Output of binarization differs in Joshua 1.1 vs. 1.3.
# However, the binarization command itself does not change so we do not need to check Joshua version here.
\$JAVA joshua.corpus.suffix_array.Compile $TRAINS $TRAINT alignment.txt `pwd` \\
|| die "Cannot run joshua.corpus.suffix_array.Compile";
# Remove the temporary gunzipped file.
rm -f alignment.txt

# Standard command footer
echo Done.
eman succeed \$mydir
echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC
