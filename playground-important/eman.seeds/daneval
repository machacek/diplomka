#!/bin/bash
# eman seed for running Joshua decoder on test data and computing the BLEU score
# Copyright © 2012 Dan Zeman <zeman@ufal.mff.cuni.cz>
# License: GNU GPL

function die() { echo "$@" >&2; exit 1; }
set -o pipefail  # safer pipes

# Ensure all the required variables are set (or provide the default)
[ -z "$STATMT" ] && die "\$STATMT must contain the full path to the root of your working copy of the StatMT repository (one level above playground)"
SMTSCR=$STATMT/scripts
eman \
  defvar MERTSTEP type=reqstep help='where are the tuned weights of the model' \
  defvar EXTRACTSTEP type=reqstep help='where is the extracted grammar for the test set' \
  defvar EXTRACTFOR inherit=EXTRACTSTEP:FOR help='what are we going to translate (dev|test)' \
  defvar DATASTEP type=reqstep inherit=EXTRACTSTEP help='where are test.$SRC.gz and test.$TGT.gz' \
  defvar SGMLSRC help='path to the original source file in SGML' \
  defvar SGMLREF help='path to the original reference file in SGML' \
  defvar JOSHUASTEP type=reqstep inherit=EXTRACTSTEP help='where is compiled Joshua' \
  defvar JOSHUA inherit=JOSHUASTEP help='where is compiled Joshua' \
  defvar GIZASTEP type=reqstep help='where is compiled Moses including BLEU scorer' \
  defvar SCORERS default="BLEU;PER;TER;CDER" \
  defvar SRC inherit=EXTRACTSTEP help='source language code' \
  defvar TGT inherit=EXTRACTSTEP help='target language code' \
|| exit 1

# Set local bash variables
eval `eman bash-loadvars`
[ "$EXTRACTFOR" == "test" ] || die "The extract step $EXTRACTSTEP extracted grammar for $EXTRACTFOR, not for test data"

# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0

# convert the dependencies to absolute paths
GIZASTEPDIR=`eman path $GIZASTEP`
EVALUATOR=$GIZASTEPDIR/moses/mert/evaluator
DATASTEPDIR=`eman path $DATASTEP`
MERTSTEPDIR=`eman path $MERTSTEP`
MERTRESULT=$MERTSTEPDIR/decoder-config.txt.ZMERT.final
EXTRACTSTEPDIR=`eman path $EXTRACTSTEP`

gunzip $STATMT/src/testbleu.gz -c > ./testbleu \
|| die "Cannot extract testbleu binary!"
chmod +x ./testbleu

cat << KONEC > eman.command
# This is the command to be run here
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
mydir=\$(pwd)
set -o pipefail
function die() { echo "\$@" >&2 ; eman fail \$mydir ; exit 1 ; }
renice 10 \$\$
ulimit -c 1 # core files limited to 1 byte

# There must be the ZMERT-generated config file with the tuned weights.
[ -f $MERTRESULT ] || die "$MERTRESULT not found"
# Copy the config file with the tuned weights to the working folder.
# On the fly, make it point to the new grammar rather than the one extracted for dev set.
echo "tm_file=$EXTRACTSTEPDIR/grammar.gz" > decoder-config.txt
# We output N best hypotheses for dev set but we only want 1 best hypothesis for test set.
echo "top_n=1" >> decoder-config.txt
cat $MERTRESULT | grep -vP '(tm_file|top_n)\s*=' >> decoder-config.txt \\
|| die "Cannot copy $MERTRESULT"
gunzip -c $DATASTEPDIR/test.$SRC.gz > test.$SRC.txt || die "Failed to gunzip the source test file"
# JOSHUA may exist when generating this script but it also must exist and be exported when parextract.pl is invoked!
# JOSHUA_VERSION should be inherited from the $JOSHUASTEP but we now support only 1.3 anyway.
export JOSHUA=$JOSHUA
export JOSHUA_VERSION=1.3
# Run the decoder.
$STATMT/joshua-scripts/parcoder.pl \$mydir/decoder-config.txt \$mydir/test.$SRC.txt \$mydir/test.joshua-nbest.$TGT.txt \$mydir/parcoder \\
|| die "Parallelized Joshua decoder failed"
# Although we changed the configuration so that the decoder outputs 1-best output (top_n=1),
# the output will be in N-best format. Change it to simple text.
$STATMT/joshua-scripts/get_1best_from_Nbest.pl test.joshua-nbest.$TGT.txt test.joshua-oov.$TGT.txt \\
|| die "Failed to convert Joshua output from N-best to 1-best"
# Joshua 1.3 appends '_OOV' to every out-of-vocabulary word. This is good for
# error analysis but less so for evaluation: it can decrease BLEU score.
sed 's/_OOV//g' < test.joshua-oov.$TGT.txt > test.joshua.$TGT.txt \\
|| die "Failed to remove _OOV suffixes from Joshua output"
# Compute the BLEU score of the system output.
# BEWARE! We are comparing the translation of the preprocessed source to the preprocessed target.
# Instead, we should postprocess the output and compare it to the original target.
gunzip -c $DATASTEPDIR/test.$TGT.gz > test.$TGT.txt || die "Failed to gunzip the reference translation of the test file"
java -cp $JOSHUA/bin joshua.util.JoshuaEval -cand test.joshua.$TGT.txt -ref test.$TGT.txt \\
|| die "Failed to compute the BLEU score"
# Detokenize and capitalize the output text. That is the way a human user wants to get it. And also the way we are to submit it.
# We may also want to normalize punctuation (convert Unicode quotation marks to undirected ASCII ") to get the data as similar as possible to what mteval-v11b will consider.
# However, we probably only want to do this with one of our contrastive submissions, while the primary result should have correct punctuation for the human evaluators.
# $SMTSCR/normalize-punctuation.pl $TGT
sysname=uk-dan
( cat test.joshua.$TGT.txt | $SMTSCR/capitalize_sentences.pl | $SMTSCR/detokenizer.pl | $SMTSCR/wrap-xml.pl $TGT $SGMLSRC \$sysname > test.joshua.$TGT.sgml ) || "Detokenization failed"
# The testblue and Moses evaluators do not perform their own tokenization.
# We thus evaluate tokenized output against tokenized reference. (We do not want to lose score points for punctuation tokens.)
# Ondřej's testbleu ought to be much faster than the Moses evaluator below.
( ./testbleu test.$TGT.txt < test.joshua.$TGT.txt | tee BLEU ) \\
|| die "Testbleu evaluator failed"
# Than the widely used mteval-v11b
( $SMTSCR/mteval-v13a.pl -r $SGMLREF -s $SGMLSRC -t test.joshua.$TGT.sgml ) \\
|| die "MTeval failed"
# Now also the Moses evaluator.
( $EVALUATOR --sctype "$SCORERS" --reference test.$TGT.txt --candidate test.joshua.$TGT.txt --bootstrap 1000 --rseed 1234 | tee scores ) \\
|| die "Moses evaluator failed"

# Standard command footer
echo Done.
eman succeed \$mydir
echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC
