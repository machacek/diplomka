#!/bin/bash
# eman seed for word alignment

function die() { echo "$@" >&2; exit 1; }
set -o pipefail  # safer pipes

PLAYGROUND=`eman path` # eman playground directory

# Ensure all the required variables are set (or provide the default)
eman \
  defvar GIZASTEP type=reqstep help='where is GIZA/mGIZA and symal compiled' \
  defvar USEMODEL type=optstep default='' \
    help='use MGiza to align the data using an existing model, implies KEEPMODEL=no' \
  defvar KEEPMODEL default='yes' \
    help='store the model, only has effect when MGiza is used' \
  defvar CORPUS help='the corpus name' \
  defvar SRCALIAUG help='lang+factors for the source side' \
  defvar TGTALIAUG help='lang+factors for the target side' \
  defvar TMPDIR help='temporary directory for Gizawrapper' default='/mnt/h/tmp/' \
  defvar ALISYMS default=gdf,revgdf,gdfa,revgdfa,left,right,int,union \
    help='symmetrization methods, several allowed if delimited by comma' \
  defvar ALILABEL default='' \
    help='alignment "corpus" name, generated automatically if not given' \
  defvar EMAN_CORES default='1' \
    help='Core number for mgiza and SGE. Not used with GIZA++. Default=1 (just 1 core)' \
|| exit 1

# Set local bash variables
eval `eman bash-loadvars`

if [ -z "$ALILABEL" ]; then
  export ALILABEL=$(echo $SRCALIAUG-$TGTALIAUG | tr '+.' '--')
  eman defvar ALILABEL
fi

# do not keep the model if we don't create one
if [ -n "$USEMODEL" ] ; then
  MODELPATH="$(eman path $USEMODEL)/model"
  export KEEPMODEL=no
  eman defvar KEEPMODEL
fi

GIZAWRAPPER=$PLAYGROUND/../scripts/gizawrapper.pl
[ -x $GIZAWRAPPER ] || die "gizawrapper not found: $GIZAWRAPPER"

# add source and target corpora to deps
eval $($PLAYGROUND/corpman --factorindex --init $CORPUS/$SRCALIAUG --bashvars=srccorpstep=stepname,srccorplen=linecount)
[ ! -z "$srccorpstep" ] || die "Missing source corpus"
eval $($PLAYGROUND/corpman --factorindex --init $CORPUS/$TGTALIAUG --bashvars=tgtcorpstep=stepname,tgtcorplen=linecount)
[ ! -z "$tgtcorpstep" ] || die "Missing target corpus"

[ $tgtcorplen == $srccorplen ] || die "Mismatching corpora lengths: src $srccorplen lines, tgt $tgtcorplen"

eman add-deps . $srccorpstep $tgtcorpstep

i=1
for s in $(echo $ALISYMS | tr , ' '); do \
  $PLAYGROUND/corpman register -- alignment.gz $i $CORPUS $s-$ALILABEL ali $srccorplen \
  || die "Failed to register corpus"
  i=$(($i+1))
done

# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0

# Run checks in the preparation phase
# no checks.

# convert the dependencies to absolute paths
GIZASTEP=`eman path $GIZASTEP`

# Emit the main script to be used in the running phase
cat > eman.command << KONEC
#!/bin/bash
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
mydir=\$(pwd)
set -o pipefail
function die() { echo "\$@" >&2 ; eman fail \$mydir ; exit 1 ; }
renice 10 \$\$
ulimit -c 1 # core files limited to 1 byte

export SCRIPTS_ROOTDIR=$GIZASTEP/moses/scripts
echo SCRIPTS_ROOTDIR=\$SCRIPTS_ROOTDIR

function mkcorpus() {
  # If local copy of corpus already exists (we are running 'eman continue') remove it first.
  rm -f corpus.\$2.gz
  $PLAYGROUND/corpman --factorindex --wait \$1 || die "Failed to prepare \$1"
  step_file_col=(\$($PLAYGROUND/corpman --factorindex \$1))
  step_file=\$(eman path \${step_file_col[0]})/\${step_file_col[1]}
  scripts=$PLAYGROUND/../scripts
  # Source corpus contains just one column.
  if [ "\${step_file_col[2]}" == "-1" ]; then
    # Every token contains just the required factors.
    if [ "\${step_file_col[3]}" == "-1" ]; then
      \$scripts/wiseln \$step_file corpus.\$2.gz \\
      || die "Failed to clone \$2 corpus \$1"
    # There are additional factors that must be filtered out.
    else
      echo "Selecting the factors from \$step_file_col"
      eval \$($PLAYGROUND/corpman --factorindex --cmd \$1) | \$scripts/reduce_factors.pl \${step_file_col[3]} | gzip -c > corpus.\$2.gz
      ###!!! The following did not work because the corpus was gzipped. The above should be better.
      #\$scripts/reduce_factors.pl \${step_file_col[3]} < \$step_file | gzip -c > corpus.\$2.gz
    fi
  # There are more than one column, the required column must be extracted.
  else
    # Every token contains just the required factors.
    if [ "\${step_file_col[3]}" == "-1" ]; then
      echo "Selecting the column from \$step_file_col"
      eval \$($PLAYGROUND/corpman --factorindex --cmd \$1) | gzip -c > corpus.\$2.gz
    # There are additional factors that must be filtered out.
    else
      echo "Selecting the column and factors from \$step_file_col"
      eval \$($PLAYGROUND/corpman --factorindex --cmd \$1) | \$scripts/reduce_factors.pl \${step_file_col[3]} | gzip -c > corpus.\$2.gz
    fi
  fi
}
mkcorpus $CORPUS/$SRCALIAUG src
mkcorpus $CORPUS/$TGTALIAUG tgt

tempdir=$TMPDIR
[ -d "\$tempdir" ] || tempdir=/tmp

[ -z "`echo $GIZASTEP | grep 's.mgiza'`" ] || ismgiza=yes

wrapperargs="corpus.src.gz corpus.tgt.gz \\
  --lfactors=0 --rfactors=0 \\
  --tempdir=\$tempdir \\
  --dirsym=$ALISYMS \\
  --drop-bad-lines \\
"

if [ "\$ismgiza" = yes ]; then
  wrapperargs="\$wrapperargs --mgizadir=$GIZASTEP/bin --mgizacores=$EMAN_CORES"
  [ "$KEEPMODEL" = yes ] && wrapperargs="\$wrapperargs --keep"
  [ -z "$USEMODEL" ] || wrapperargs="\$wrapperargs --mgizamodel=$MODELPATH"
else
  wrapperargs="\$wrapperargs --bindir=$GIZASTEP/bin"
fi

$GIZAWRAPPER \\
\$wrapperargs 2> gizawrapper.log \\
| gzip -c > alignment.gz \\
|| die "Failed to align the corpus"

alilen=\`zcat alignment.gz | wc -l\`
srclen=\`zcat corpus.src.gz | wc -l\`
[ \$alilen == \$srclen ] \
  || die "Mismatched file lengths: ali \$alilen, src \$srclen"

echo "Aligned, now register alignments in corpman."
i=1
for s in $(echo $ALISYMS | tr , ' '); do \\
  $PLAYGROUND/corpman register -- alignment.gz \$i $CORPUS \$s-$ALILABEL ali \$srclen \\
  || die "Failed to register corpus"
  i=\$((\$i+1))
done
rm $PLAYGROUND/corpman.index # force to reindex

if [ "\$ismgiza" = yes ] && [ "$KEEPMODEL" = yes ]; then
  wrapperdir=\$(cat gizawrapper.log | grep 'My tempdir' | head -1 | cut -d' ' -f3)
  echo "Storing model from \$wrapperdir in \$mydir/model"
  mkdir model
  cd \$wrapperdir || die "Could not change dir to \$wrapperdir"
  cp *.final *.gizacfg vcb* \$mydir/model || die "Failed to copy model files"
  cd \$mydir || die "Failed to change dir back to \$mydir"
  echo "Deleting \$wrapperdir"
  rm -rf \$wrapperdir
fi

# Standard command footer
echo Done.
eman succeed \$mydir
echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC
